## This is to draw the shape file of Singapore outline
map_gg2 <- geom_polygon(data = shapefile_df,
aes(x = long, y = lat, group = group),
color = 'gray', fill = 'gray', size = .2)
map_gg3 <- geom_path(data = shapefile_df,
aes(x = long, y = lat, group = group),
color = 'red', fill = 'red', size = .2)
map_gg4 <- ggplot() + map_gg2+ map_gg3 +geom_point() +
annotate("point", x = 31596, y = 29220, colour = "blue")
print(map_gg4)
##print(map_ggg)
# G=bus_graph
#
# #Normally we need to create two vectors in order to plot both the network data and the coordinates on a map
# #plot_vector takes the longitude and latitude to be plotted on a map.
# #plot_vector1 takes the lon, lat and the network centrality values.
# plot_vector<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude))
# plot_vector1<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality))
#
# #we are taking the edgelist which is being used to get the origin and destination of the airport data.
# #edgelist[,1]- takes the origin values and the edgelist[,2] takes the destination values.
# edgelist <- get.edgelist(G)
# edgelist[,1]<-as.numeric(match(edgelist[,1],V(G)))
# edgelist[,2]<-as.numeric(match(edgelist[,2],V(G)))
#
# #the edges now consists of the edge between the origin and the destination values
# edges <- data.frame(plot_vector[edgelist[,1],], plot_vector1[edgelist[,2],])
#
# #naming the coloumns obtained to plot
# colnames(edges) <- c("X1","Y1","X2","Y2")
#Here we are taking ggmap as our base layer. on top of ggmap we are plotting the origin and destination coordinates using the plot_vector as our 2nd layer, then we are plotting the coordinates of all the centrality from the plot_vector1 as our 3rd layer and then we are ploting the geom_segment i.e. the edges as our 4th layer.
plot_vector1
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
passVol <- passVol %>% rename(BusStopCode = PT_CODE) %>%
group_by(BusStopCode) %>% summarise(frequencyIn = sum(TOTAL_TAP_IN_VOLUME),frequencyOut = sum(TOTAL_TAP_OUT_VOLUME))
# centrality dataset
central <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/centralityTable.csv")
central$BusStopCode <- as.character(central$BusStopCode)
pass_central <- inner_join(passVol, central, by = "BusStopCode") %>%
rename(closeness=closeness.f, between=between.f,eigen=eigen.f,degree=degree.f)
plot(eigen)
plot(pass_central$eigen)
plot(pass_central$eigen)
plot(pass_central$degree)
library(ggplot)
library(ggplot2)
plot(pass_central$eigen)
plot(pass_central$degree)
library(ggplot2)
ggplot(pass_central, aes(eigen)) +
geom_point()
library(ggplot2)
a <- ggplot(pass_central, aes(x = eigen))
a + geom_histogram(bins = 30, color = "black", fill = "gray") +
geom_vline(aes(xintercept = mean(weight)),
linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(pass_central, aes(x = eigen))
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(pass_central, aes(x = eigen))
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
passVol <- passVol %>% rename(BusStopCode = PT_CODE) %>%
group_by(BusStopCode) %>% summarise(frequencyIn = sum(TOTAL_TAP_IN_VOLUME),frequencyOut = sum(TOTAL_TAP_OUT_VOLUME))
# centrality dataset
central <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/centralityTable.csv")
central$BusStopCode <- as.character(central$BusStopCode)
pass_central <- inner_join(passVol, central, by = "BusStopCode") %>%
rename(closeness=closeness.f, between=between.f,eigen=eigen.f,degree=degree.f)
pass_central
library(ggplot2)
a <- ggplot(pass_central, aes(x = pass_central$eigen))
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(pass_central, aes(x = closeness))
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(pass_central, aes(x = 'closeness'))
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(pass_central, aes(x = closeness))
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness)) +
geom_dotplot(dotsize =0.5)
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
a <- ggplot(data = pass_central, aes(x = eigen)) +
geom_dotplot(dotsize =0.5)
a
a <- ggplot(data = pass_central, aes(x = between)) +
geom_dotplot(dotsize =0.5)
a
a <- ggplot(data = pass_central, aes(x = degree)) +
geom_dotplot(dotsize =0.5)
a
a <- ggplot(data = pass_central, aes(x = eigen)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = between)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = degree)) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness)) +
geom_dotplot(dotsize =0.5)
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness)) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
a <- ggplot(data = pass_central, aes(x = degree)) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness**2)) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = sqrt(closeness)) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = sqrt(closeness))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = log(closeness))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
a <- ggplot(data = pass_central, aes(x = eigen)) +
geom_density()
a
a <- ggplot(data = log(pass_central), aes(x = eigen)) +
geom_density()
a <- ggplot(data = log(pass_central)), aes(x = eigen)) +
a <- ggplot(data = pass_central, aes(x = log(eigen))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = cuberoot(closeness))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness**(1/3))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness**(3))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness**(5))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness**(6))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness**(7))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
2**3
a <- ggplot(data = pass_central, aes(x = eigen**7)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = eigen**5)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = eigen**2)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = eigen)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = eigen**(1/2))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = between)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = between**(1/2))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = between**(1/4))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = degree)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = log(degree))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = degree**2)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = degree**(1/2))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = degree**(1/4))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = cos(degree))) +
geom_density()
a
pass_central %>% mutate(id= row_number())
a <- ggplot(data = pass_central, aes(x = sin(degree))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = acos(degree))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = asin(degree))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (degree)**(1/4))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = acos(degree))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (degree))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (degree)**2)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (degree)**(1/2))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (degree))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (degree)**(1/2))) +
geom_density()
a
runApp()
runApp('C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_my')
runApp()
version
o.packages
old.packages
old.packages()
runApp()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
library(tidyverse)
plot(pressure)
library(tidyverse)
library(MASS)
plot(pressure)
library('tidyverse')
library('lubridate')
library('MASS')
plot(pressure)
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
passVol <- passVol %>% rename(BusStopCode = PT_CODE) %>%
group_by(BusStopCode) %>% summarise(frequencyIn = sum(TOTAL_TAP_IN_VOLUME),frequencyOut = sum(TOTAL_TAP_OUT_VOLUME))
# centrality dataset
central <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/centralityTable.csv")
central$BusStopCode <- as.character(central$BusStopCode)
pass_central <- inner_join(passVol, central, by = "BusStopCode") %>%
rename(closeness=closeness.f, between=between.f,eigen=eigen.f,degree=degree.f)
pass_central
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library('tidyverse')
library('lubridate')
library('MASS')
plot(pressure)
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
passVol <- passVol %>% rename(BusStopCode = PT_CODE) %>%
group_by(BusStopCode) %>% summarise(frequencyIn = sum(TOTAL_TAP_IN_VOLUME),frequencyOut = sum(TOTAL_TAP_OUT_VOLUME))
# centrality dataset
central <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/centralityTable.csv")
central$BusStopCode <- as.character(central$BusStopCode)
pass_central <- inner_join(passVol, central, by = "BusStopCode") %>%
rename(closeness=closeness.f, between=between.f,eigen=eigen.f,degree=degree.f)
pass_central
# Compute the analysis of variance
res.aov <- aov(frequencyIn ~ between, data = pass_central)
# Summary of the analysis
summary(res.aov)
anova(linear)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library('tidyverse')
library('lubridate')
library('MASS')
plot(pressure)
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
passVol <- passVol %>% rename(BusStopCode = PT_CODE) %>%
group_by(BusStopCode) %>% summarise(frequencyIn = sum(TOTAL_TAP_IN_VOLUME),frequencyOut = sum(TOTAL_TAP_OUT_VOLUME))
# centrality dataset
central <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/centralityTable.csv")
central$BusStopCode <- as.character(central$BusStopCode)
pass_central <- inner_join(passVol, central, by = "BusStopCode") %>%
rename(closeness=closeness.f, between=between.f,eigen=eigen.f,degree=degree.f)
pass_central
# Compute the analysis of variance
res.aov <- aov(frequencyIn ~ between, data = pass_central)
# Summary of the analysis
summary(res.aov)
anova(linear)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library('tidyverse')
library('lubridate')
library('MASS')
plot(pressure)
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
passVol <- passVol %>% rename(BusStopCode = PT_CODE) %>%
group_by(BusStopCode) %>% summarise(frequencyIn = sum(TOTAL_TAP_IN_VOLUME),frequencyOut = sum(TOTAL_TAP_OUT_VOLUME))
# centrality dataset
central <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/centralityTable.csv")
central$BusStopCode <- as.character(central$BusStopCode)
pass_central <- inner_join(passVol, central, by = "BusStopCode") %>%
rename(closeness=closeness.f, between=between.f,eigen=eigen.f,degree=degree.f)
pass_central
# Compute the analysis of variance
res.aov <- aov(frequencyIn ~ between, data = pass_central)
# Summary of the analysis
summary(res.aov)
min(anova(linear)$'Pr(>F)'[1:4])
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library('tidyverse')
library('lubridate')
library('MASS')
plot(pressure)
passVol <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/passenger volume by busstop.csv")
passVol <- passVol %>% rename(BusStopCode = PT_CODE) %>%
group_by(BusStopCode) %>% summarise(frequencyIn = sum(TOTAL_TAP_IN_VOLUME),frequencyOut = sum(TOTAL_TAP_OUT_VOLUME))
# centrality dataset
central <- read_csv("C:/Users/jia yi/Desktop/MITB/Sem2/ISSS608 Visual Analytics and its applications/Project/RShiny/ProjRShiny_jiayi/data/centralityTable.csv")
central$BusStopCode <- as.character(central$BusStopCode)
pass_central <- inner_join(passVol, central, by = "BusStopCode") %>%
rename(closeness=closeness.f, between=between.f,eigen=eigen.f,degree=degree.f)
pass_central
# Compute the analysis of variance
res.aov <- aov(frequencyIn ~ between, data = pass_central)
# Summary of the analysis
summary(res.aov)
linear <- lm(frequencyIn ~ between+ closeness+degree+eigen, data = pass_central)
test <- summary(linear)
goood <- test$coefficients
anova(linear)
linear <- lm(frequencyIn ~ closeness+between+eigen+degree, data = pass_central)
summary(linear)
min(anova(linear)$'Pr(>F)'[1:4])
class(linear)
library(MASS)
step <- stepAIC(linear, direction = "both")
print(step)
step <- stepAIC(lm(frequencyIn ~ between+ closeness, data = pass_central), direction = "both")
#print(step)
stepSummary <- summary(step)
stepSummary
step <- stepAIC(lm(frequencyIn ~ between+ closeness+eigen, data = pass_central), direction = "both")
#print(step)
stepSummary <- summary(step)
stepSummary
step <- stepAIC(lm(frequencyIn ~ between+ closeness+eigen+degree, data = pass_central), direction = "both")
#print(step)
stepSummary <- summary(step)
stepSummary
stepSummary[4]
stepSummary[[9]][1]
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness)) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
a <- ggplot(data = pass_central, aes(x = eigen)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = between)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = degree)) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = closeness**(7))) +
geom_density()
a
# a + geom_histogram(bins = 30, color = "black", fill = "gray") +
#   geom_vline(aes(xintercept = mean(weight)),
#              linetype = "dashed", size = 0.6)
a <- ggplot(data = pass_central, aes(x = eigen**(1/2))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = between**(1/4))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (degree)**(1/2))) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = frequencyIn)) +
geom_density()
a
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**4) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**4) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**4)) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**(4)1/4)) +
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**(1/4)) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**(1/4))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**(1/5))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**(1/6))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**(1/7))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyOut)**(1/7))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyIn)**(1/7))) +
geom_density()
a
library(ggplot2)
a <- ggplot(data = pass_central, aes(x = (frequencyOut)**(1/8))) +
geom_density()
a
shiny::runApp()
runApp()
runApp()
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "classInt", "cli", "compositions", "countrycode", "covr", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "e1071", "fansi", "forcats", "foreach", "fs", "gdtools", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggtern", "gh", "glue", "graphlayouts", "gtools", "heatmaply", "hexbin", "hms", "hrbrthemes", "htmltools", "isoband", "jsonlite", "knitr", "later", "leaps", "lifecycle", "lme4", "lubridate", "lwgeom", "mapproj", "maptools", "mclust", "mime", "modelr", "nloptr", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgconfig", "plotly", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "remotes", "reshape2", "rex", "rgdal", "rlang", "rmarkdown", "robustbase", "roxygen2", "rstudioapi", "Rttf2pt1", "rversions", "scales", "selectr", "sf", "shiny", "sp", "SparseM", "stringi", "systemfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tinytex", "tmap", "tmaptools", "TSP", "units", "usethis", "vctrs", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "classInt", "cli", "compositions", "countrycode", "covr", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "e1071", "fansi", "forcats", "foreach", "fs", "gdtools", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggtern", "gh", "glue", "graphlayouts", "gtools", "heatmaply", "hexbin", "hms", "hrbrthemes", "htmltools", "isoband", "jsonlite", "knitr", "later", "leaps", "lifecycle", "lme4", "lubridate", "lwgeom", "mapproj", "maptools", "mclust", "mime", "modelr", "nloptr", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgconfig", "plotly", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "remotes", "reshape2", "rex", "rgdal", "rlang", "rmarkdown", "robustbase", "roxygen2", "rstudioapi", "Rttf2pt1", "rversions", "scales", "selectr", "sf", "shiny", "sp", "SparseM", "stringi", "systemfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tinytex", "tmap", "tmaptools", "TSP", "units", "usethis", "vctrs", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "classInt", "cli", "compositions", "countrycode", "covr", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "e1071", "fansi", "forcats", "foreach", "fs", "gdtools", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggtern", "gh", "glue", "graphlayouts", "gtools", "heatmaply", "hexbin", "hms", "hrbrthemes", "htmltools", "isoband", "jsonlite", "knitr", "later", "leaps", "lifecycle", "lme4", "lubridate", "lwgeom", "mapproj", "maptools", "mclust", "mime", "modelr", "nloptr", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgconfig", "plotly", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "remotes", "reshape2", "rex", "rgdal", "rlang", "rmarkdown", "robustbase", "roxygen2", "rstudioapi", "Rttf2pt1", "rversions", "scales", "selectr", "sf", "shiny", "sp", "SparseM", "stringi", "systemfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tinytex", "tmap", "tmaptools", "TSP", "units", "usethis", "vctrs", "withr", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "car", "carData", "classInt", "cli", "compositions", "countrycode", "covr", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "e1071", "fansi", "forcats", "foreach", "fs", "gdtools", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggtern", "gh", "glue", "graphlayouts", "gtools", "heatmaply", "hexbin", "hms", "hrbrthemes", "htmltools", "isoband", "jsonlite", "knitr", "later", "leaps", "lifecycle", "lme4", "lubridate", "lwgeom", "mapproj", "maptools", "mclust", "mime", "modelr", "nloptr", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "pkgconfig", "plotly", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "quantreg", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "remotes", "reshape2", "rex", "rgdal", "rlang", "rmarkdown", "robustbase", "roxygen2", "rstudioapi", "Rttf2pt1", "rversions", "scales", "selectr", "sf", "shiny", "sp", "SparseM", "stringi", "systemfonts", "testthat", "tibble", "tidygraph", "tidyr", "tidyselect", "tinytex", "tmap", "tmaptools", "TSP", "units", "usethis", "vctrs", "withr", "xfun", "XML", "xml2", "yaml"))
shiny::runApp()
version
