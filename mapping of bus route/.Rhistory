lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*100),color='red')
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red')
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
edgelist[,1]
as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality))
as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality,V(G)$centrality_eigen,V(G)$centrality_degree, V(G)$Id))
V(G)
as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality,V(G)$centrality_eigen,V(G)$centrality_degree, V(G)$id))
#we use the node3 to get our origin and destination airport for plotting it on our map
#plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality))
plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality,V(G)$centrality_eigen,V(G)$centrality_degree, V(G)$id))
node1=data.frame(plot_vector2[edgelist[,1],])
node2=data.frame(plot_vector2[edgelist[,2],])
node3=data.frame(cbind(node1,node2))
map_table <- node3 %>%
rename(c(long.f = V1, lat.f = V2, between.f = V3, closeness.f = V4, eigen.f = V5, degree.f = V6,
long.t = V1.1, lat.t = V2.1, between.t = V3.1, closeness.t = V4.1, eigen.t = V5.1, degree.t = V6.1
))
map_table
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red')
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#we use the node3 to get our origin and destination airport for plotting it on our map
#plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality))
plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality,V(G)$centrality_eigen,V(G)$centrality_degree)
node1=data.frame(plot_vector2[edgelist[,1],])
#we use the node3 to get our origin and destination airport for plotting it on our map
#plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality))
plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality,V(G)$centrality_eigen,V(G)$centrality_degree))
node1=data.frame(plot_vector2[edgelist[,1],])
node2=data.frame(plot_vector2[edgelist[,2],])
node3=data.frame(cbind(node1,node2))
map_table <- node3 %>%
rename(c(long.f = V1, lat.f = V2, between.f = V3, closeness.f = V4, eigen.f = V5, degree.f = V6,
long.t = V1.1, lat.t = V2.1, between.t = V3.1, closeness.t = V4.1, eigen.t = V5.1, degree.t = V6.1
))
map_table
#we use the node3 to get our origin and destination airport for plotting it on our map
#plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality))
plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality,V(G)$centrality_eigen,V(G)$centrality_degree))
node1=data.frame(plot_vector2[edgelist[,1],])
node2=data.frame(plot_vector2[edgelist[,2],])
node3=data.frame(cbind(node1,node2))
map_table <- node3 %>%
rename(c(long.f = V1, lat.f = V2, between.f = V3, closeness.f = V4, eigen.f = V5, degree.f = V6,
long.t = V1.1, lat.t = V2.1, between.t = V3.1, closeness.t = V4.1, eigen.t = V5.1, degree.t = V6.1
))
map_table
V(G)
V(G)#id
V(G)#id
V(G)$id
V(G)$id[1]
V(G)$1
V(G)
center_of_gravity
dplyr::left_join(map_table, center_of_gravity, by =("long.f" = "Longitude") )
dplyr::left_join(map_table, center_of_gravity, by =("Longitude" = "long.f") )
dplyr::left_join(map_table, center_of_gravity, by =c("long.f" = "Longitude") )
center_of_gravity
center_of_gravity[c('id', 'Longitude')]
center_of_gravity[c('id', 'Longitude')] %>% rename(id.f = id)
dplyr::left_join(map_table, center_of_gravity[c('id', 'Longitude')] %>% rename(id.f = id), by =c("long.f" = "Longitude")) %>%
dplyr::left_join(map_table, center_of_gravity[c('id', 'Longitude')] %>% rename(id.t = id), by =c("long.t" = "Longitude"))
dplyr::left_join(map_table, center_of_gravity[c('id', 'Longitude')] %>% rename(id.f = id), by =c("long.f" = "Longitude")) %>%
dplyr::left_join(center_of_gravity[c('id', 'Longitude')] %>% rename(id.t = id), by =c("long.t" = "Longitude"))
#we use the node3 to get our origin and destination airport for plotting it on our map
#plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality))
plot_vector2<- as.data.frame(cbind(V(G)$Longitude,V(G)$Latitude,V(G)$betweenness_centrality,V(G)$closeness_centrality,V(G)$centrality_eigen,V(G)$centrality_degree))
node1=data.frame(plot_vector2[edgelist[,1],])
node2=data.frame(plot_vector2[edgelist[,2],])
node3=data.frame(cbind(node1,node2))
map_table <- node3 %>%
rename(c(long.f = V1, lat.f = V2, between.f = V3, closeness.f = V4, eigen.f = V5, degree.f = V6,
long.t = V1.1, lat.t = V2.1, between.t = V3.1, closeness.t = V4.1, eigen.t = V5.1, degree.t = V6.1))%>%
dplyr::left_join(center_of_gravity[c('id', 'Longitude')] %>% rename(id.f = id), by =c("long.f" = "Longitude")) %>%
dplyr::left_join(center_of_gravity[c('id', 'Longitude')] %>% rename(id.t = id), by =c("long.t" = "Longitude"))
map_table
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red')
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red')
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
map_table
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = ~id.f,
popup = ~paste0("<b>", id.f, "</b>", "<br/>", 'Centrality Betweenness: ', between.f, "<br/>", 'Centrality Closeness: ', closeness.f),
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f']
#popup = ~paste0("<b>", id.f, "</b>", "<br/>", 'Centrality Betweenness: ', between.f, "<br/>", 'Centrality Closeness: ', closeness.f),
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f']
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Centrality Betweenness: ', map_table[i,'between.f'], "<br/>", 'Centrality Closeness: ', map_table[i,'closeness.f']),
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f']
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Centrality Betweenness: ', map_table[i,'between.f'], "<br/>", 'Centrality Closeness: ', map_table[i,'closeness.f'])
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Centrality Betweenness: ', map_table[i,'between.f'], "<br/>", 'Centrality Closeness: ', map_table[i,'closeness.f'])
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', map_table[i,'between.f'], "<br/>", 'Closeness: ', ... = map_table[i,'closeness.f'], "<br/>", 'Eigenvalue: ', map_table[i,'eigen.f'], "<br/>", 'Degree: ', map_table[i,'degree.f']       )
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", round(map_table[i,'id.f'],2), "</b>", "<br/>", 'Betweenness: ', map_table[i,'between.f'], "<br/>", 'Closeness: ', ... = map_table[i,'closeness.f'], "<br/>", 'Eigenvalue: ', map_table[i,'eigen.f'], "<br/>", 'Degree: ', map_table[i,'degree.f']       )
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
round(map_table[1,'id.f'],2)
map_table[1,'id.f']
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = map_table[i,'closeness.f'], "<br/>", 'Eigenvalue: ', map_table[i,'eigen.f'], "<br/>", 'Degree: ', map_table[i,'degree.f']       )
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]))
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5)
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='red',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'red')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='black',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'black')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='firebrick1',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'gray33')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='firebrick1',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles()
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'black')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='darkred',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles() %>%
setMaxBounds(lng1 = 103.801959 + .25,
lat1 = 1.32270 + .25,
lng2 = 103.801959 - .25,
lat2 = 1.32270 - .25)
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'black')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='darkred',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("Stamen.TonerLite") %>%
addTiles() %>%
setMaxBounds(lng1 = 103.801959 + .25,
lat1 = 1.32270 + .25,
lng2 = 103.801959 - .25,
lat2 = 1.32270 - .25)
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'black')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='darkred',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("Stamen", group = "TonerLite") %>%
addTiles() %>%
setMaxBounds(lng1 = 103.801959 + .25,
lat1 = 1.32270 + .25,
lng2 = 103.801959 - .25,
lat2 = 1.32270 - .25)
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'black')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='darkred',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("TonerLite", group = "Stamen") %>%
addTiles() %>%
setMaxBounds(lng1 = 103.801959 + .25,
lat1 = 1.32270 + .25,
lng2 = 103.801959 - .25,
lat2 = 1.32270 - .25)
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'black')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='darkred',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
#Then we use a for loop in order to put the destination and origin airport on to the leaflet
map3 = leaflet(map_table) %>%
addProviderTiles("CartoDB", group = "CartoDB") %>%
addTiles() %>%
setMaxBounds(lng1 = 103.801959 + .25,
lat1 = 1.32270 + .25,
lng2 = 103.801959 - .25,
lat2 = 1.32270 - .25)
for(i in 1:nrow(node3)){
map3 <- addPolylines(map3, lat = as.numeric(map_table[i, c('lat.f', 'lat.t')]),
lng = as.numeric(map_table[i, c('long.f', 'long.t')]),
weight = 0.5,
color = 'black')
#origin
map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.f']),
lng = as.numeric(map_table[i,'long.f']),radius =(as.numeric(map_table[i, 'between.f'])*50),color='darkred',
label = map_table[i,'id.f'],
popup = ~paste0("<b>", map_table[i,'id.f'], "</b>", "<br/>", 'Betweenness: ', round(map_table[i,'between.f'],2), "<br/>", 'Closeness: ', ... = round(map_table[i,'closeness.f'],2), "<br/>", 'Eigenvalue: ', round(map_table[i,'eigen.f'],2), "<br/>", 'Degree: ', round(map_table[i,'degree.f'],2))
)
#destination
#  map3<-addCircleMarkers(map3, lat = as.numeric(map_table[i, 'lat.t']),
#                             lng = as.numeric(map_table[i, 'long.t']),radius =(as.numeric(map_table[i, 'between.t'])),color='red' )
}
map3
